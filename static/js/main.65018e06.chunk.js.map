{"version":3,"sources":["components/layout/Navbar.js","context/Context.js","components/pages/products/ProductItem.js","components/pages/products/Products.js","context/Reducer.js","context/State.js","serviceWorker.js","index.js"],"names":["Navbar","className","Context","createContext","ProductItem","product","id","title","sell_price","src","list_image_url","alt","Products","products","useContext","map","key","state","action","type","payload","State","props","useReducer","Reducer","dispatch","Provider","value","getData","axios","get","then","res","data","console","log","catch","err","children","Boolean","window","location","hostname","match","App","useEffect","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0QAoBeA,G,YAhBA,WACb,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,QAAf,QAGA,yBAAKA,UAAU,QAAf,qCAGA,yBAAKA,UAAU,gBCTNC,EAFCC,0BCoBDC,EApBK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,6BAEIA,EAAQC,GAGRD,EAAQE,MAGRF,EAAQG,WAEV,yBAAKC,IAAKJ,EAAQK,eAAgBC,IAAKN,EAAQE,QAC/C,6FCQSK,G,MAfE,WAAO,IACdC,EAAaC,qBAAWZ,GAAxBW,SAER,OACE,4CAGIA,EAASE,KAAI,SAAAV,GAAO,OAClB,kBAAC,EAAD,CAAaW,IAAKX,EAAQC,GAAID,QAASA,U,iCChBlC,WAACY,EAAOC,GACrB,OAAQA,EAAOC,MACb,IAAK,WACH,OAAO,eACFF,EADL,CAEEJ,SAAUK,EAAOE,UAErB,QACE,OAAOH,ICuCEI,EA1CD,SAAAC,GACZ,IADqB,EAKKC,qBAAWC,EAJhB,CACnBX,SAAU,KAFS,mBAKdI,EALc,KAKPQ,EALO,KA8BrB,OACE,kBAAC,EAAQC,SAAT,CACEC,MAAO,CACLd,SAAUI,EAAMJ,SAChBe,QAlBU,WACdC,IAAMC,IAAI,uBACPC,MAAK,SAAAC,GACJP,EAAS,CACPN,KAAM,WACNC,QAASY,EAAIC,OAEfC,QAAQC,IAAIH,EAAIC,SAEjBG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,SAWbf,EAAMgB,WC9BOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLN,IAAMC,EAAM,WAAO,IACThB,EAAYd,qBAAWZ,GAAvB0B,QAOR,OALAiB,qBAAU,WACRjB,MAEC,IAGD,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QAaNkB,IAASC,OAAO,mBARO,WACrB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SAKU,MAAoBC,SAASC,eAAe,SD8FtD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.65018e06.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './navbar.scss';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"logo\">\r\n        LOGO\r\n      </div>\r\n      <div className=\"menu\">\r\n        HOME / PRODUCTS / ABOUT / CONTACT\r\n      </div>\r\n      <div className=\"userData\">\r\n      \r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import { createContext } from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;","import React from 'react'\r\n\r\nconst ProductItem = ({ product }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        product.id\r\n      }\r\n      {\r\n        product.title\r\n      }\r\n      {\r\n        product.sell_price\r\n      }\r\n      <img src={product.list_image_url} alt={product.title}/>\r\n      <button>\r\n        مشاهد/خرید\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductItem\r\n","import React, { useContext } from 'react'\r\n\r\nimport Context from '../../../context/Context';\r\n\r\nimport ProductItem from './ProductItem' \r\n\r\nimport './products.scss';\r\n\r\nconst Products = () => {\r\n  const { products } = useContext(Context)\r\n  \r\n  return (\r\n    <div>\r\n      all products\r\n      {\r\n        products.map(product => (\r\n          <ProductItem key={product.id} product={product} />\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Products\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'get-data':\r\n      return {\r\n        ...state,\r\n        products: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","import React, { useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport Context from './Context';\r\nimport Reducer from './Reducer';\r\n\r\nconst State = props => {\r\n  const initialState = {\r\n    products: [],\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n\r\n  // eslint-disable-next-line\r\n  const tempFunc = () => {\r\n    dispatch({\r\n      type: 'nothing',\r\n      paylaod: 'delete this function'\r\n    })\r\n  }\r\n\r\n  // Get data\r\n  const getData = () => {\r\n    axios.get('/api/NPP-dcbq7OjykP')\r\n      .then(res => {\r\n        dispatch({\r\n          type: 'get-data',\r\n          payload: res.data\r\n        })\r\n        console.log(res.data)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        products: state.products,\r\n        getData,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default State;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect, useContext } from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './index.css';\n\nimport Navbar from './components/layout/Navbar';\nimport Products from './components/pages/products/Products';\n\nimport State from './context/State';\nimport Context from './context/Context';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst App = () => {\n  const { getData } = useContext(Context)\n\n  useEffect(() => {\n    getData()\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <>\n      <Navbar />\n      <Products />\n    </>\n  );\n}\n\nconst StateContainer = () => {\n  return (\n    <State>\n      <App />\n    </State>\n  )\n}\n\nReactDOM.render(<StateContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}